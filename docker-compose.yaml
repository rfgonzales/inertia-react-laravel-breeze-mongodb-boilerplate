version: "3.9"

services:
  # node:
  #   container_name: node
  #   build:
  #     dockerfile: "/docker/node/dockerfile"
  #   restart: unless-stopped
  #   volumes:
  #     - .:/var/www/html
  #   ports:
  #     - 5173:5173
  #     - 3000:3000
  #     - 13714:13714
  #   networks:
  #     - default

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - ./mongodb-data/mongo:/data/db
      - ./mongodb-keyfile/keyfile:/etc/secrets/keyfile
      # - ./docker/scripts/init.js:/docker-entrypoint-initdb.d/init.js
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: admin
    networks:
      - default
    command: >
      bash -c "chmod 600 /etc/secrets/keyfile && 
              mongod --bind_ip_all --replSet rs0 --keyFile /etc/secrets/keyfile"
  mongodb1:
    image: mongo:latest
    container_name: mongodb1
    restart: unless-stopped
    ports:
      - "27018:27017"
    volumes:
      - ./mongodb-data/mongo1:/data/db
      - ./mongodb-keyfile/keyfile:/etc/secrets/keyfile
      # - ./docker/scripts/init.js:/docker-entrypoint-initdb.d/init.js
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: admin
    networks:
      - default
    command: >
      bash -c "chmod 600 /etc/secrets/keyfile && 
              mongod --bind_ip_all --replSet rs0 --keyFile /etc/secrets/keyfile"
  mongodb2:
    image: mongo:latest
    container_name: mongodb2
    restart: unless-stopped
    ports:
      - "27019:27017"
    volumes:
      - ./mongodb-data/mongo2:/data/db
      - ./mongodb-keyfile/keyfile:/etc/secrets/keyfile
      # - ./docker/scripts/init.js:/docker-entrypoint-initdb.d/init.js
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: admin
    networks:
      - default
    command: >
      bash -c "chmod 600 /etc/secrets/keyfile && 
              mongod --bind_ip_all --replSet rs0 --keyFile /etc/secrets/keyfile"
  # mongo-setup:
  #   image: mongo:latest
  #   container_name: mongo-setup
  #   networks:
  #     - default
  #   depends_on:
  #     - mongodb
  #     - mongodb1
  #     - mongodb2
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: admin
  #   volumes:
  #     - ./mongodb-keyfile/keyfile:/etc/secrets/keyfile
  #     # - ./docker/scripts/init.js:/docker-entrypoint-initdb.d/init.js
  #   entrypoint: >
  #     bash -c "
  #     chmod 600 /etc/secrets/keyfile &&
  #     echo 'Waiting for MongoDB to start...';
  #     sleep 15;
  #     until mongosh --host mongodb:27017 -u root -p admin --eval 'print(\"waited for connection\")'; do
  #       sleep 20;
  #     done;
  #     echo 'Configuring replica set';
  #     mongosh --host mongodb:27017 -u root -p admin  --authenticationDatabase admin --eval 'rs.initiate({
  #       _id: \"rs0\",
  #       members: [
  #         { _id: 0, host: \"mongodb:27017\" },
  #         { _id: 1, host: \"mongodb1:27017\" },
  #         { _id: 2, host: \"mongodb2:27017\" }
  #       ]
  #     });'
  #     "
  redis:
    image: redis:latest
    container_name: redis_cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - default
  # laravel:
  #   container_name: laravel-dev-server
  #   build:
  #     dockerfile: "/docker/laravel/dockerfile"
  #   depends_on:
  #     - redis
  #     - mongodb
  #     - node
  #   ports:
  #     - 8000:8000

  #   volumes:
  #     - .:/var/www/html
  #   command: ["sh", "-c", "php artisan serve --host=0.0.0.0"]
  #   networks:
  #     - default
  php-fpm:
    container_name: php-fpm
    build:
      dockerfile: "/docker/nginx/dockerfile"
    volumes:
      - .:/var/www/html
    command: >
      bash -c "chown -R www-data:www-data /var/www/html && 
              chmod 777 -R /var/www/html && php-fpm"

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - .:/var/www/html
    depends_on:
      - php-fpm
      - mongodb1
